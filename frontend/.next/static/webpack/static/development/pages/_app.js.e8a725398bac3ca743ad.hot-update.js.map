{"version":3,"file":"static/webpack/static/development/pages/_app.js.e8a725398bac3ca743ad.hot-update.js","sources":["webpack:///./components/Payment.js"],"sourcesContent":["import React, { Component } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass Payment extends Component {\n  onToken = async (res, createOrder) => {\n    NProgress.start();\n    console.log('On token called');\n    console.log(res);\n    console.log(res.id);\n    // manually call the mutation once we have the stripe token\n    const order = await createOrder({\n      variables: {\n        token: res.id,\n      },\n    }).catch(err => {\n      alert(err.message);\n    });\n    // console.log(order)\n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id },\n    });\n  };\n  render() {\n    return (\n      <User>\n        {({ data: { me }, loading }) => {\n          if (loading) return null;\n          return (\n            <Mutation\n              mutation={CREATE_ORDER_MUTATION}\n              refetchQueries={[{ query: CURRENT_USER_QUERY }]}>\n              {createOrder => (\n                <StripeCheckout\n                  amount={calcTotalPrice(me.cart)}\n                  name='Mehko LLC'\n                  description={`Order of ${totalItems(me.cart)}`}\n                  image={\n                    me.cart.length && me.cart[0].item && me.cart[0].item.image\n                  } //won't return image if no 1st item.\n                  stripeKey='pk_test_q84Z3HocMGPwVyZprfY0UpJn00BIVcU0X9'\n                  currency='USD'\n                  email={me.email}\n                  token={res => this.onToken(res, createOrder)} //reason not just \"this.onToken\" is b/c we will be passing a mutation\n                >\n                  {this.props.children}\n                </StripeCheckout>\n              )}\n            </Mutation>\n          );\n        }}\n      </User>\n    );\n  }\n}\n\nexport default Payment;\nexport { CREATE_ORDER_MUTATION };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AACA;AADA;AADA;AAKA;AACA;AACA;AAbA;AAMA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAkBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAkBA;AAGA;;;;AAlDA;AACA;AAoDA;;;;;A","sourceRoot":""}