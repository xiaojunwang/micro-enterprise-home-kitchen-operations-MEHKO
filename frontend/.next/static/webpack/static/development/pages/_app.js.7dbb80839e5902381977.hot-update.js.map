{"version":3,"file":"static/webpack/static/development/pages/_app.js.7dbb80839e5902381977.hot-update.js","sources":["webpack:///./components/RemoveFromCart.js"],"sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst REMOVE_FROM_CART_MUTATION = gql`\n  mutation removeFromCart($id: ID!) {\n    removeFromCart(id: $id) {\n      id\n    }\n  }\n`;\n\nconst BigButton = styled.button`\n  font-size: 3rem;\n  background: none;\n  border: 0;\n  &:hover {\n    color: ${props => props.theme.red};\n    cursor: pointer;\n  }\n`;\n\nclass RemoveFromCart extends React.Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n  };\n\n  //This gets called as soon as we get a response back the server after a mutation has been performed\n\n  update = (cache, payload) => {\n    //cache is the apollo cache, payload is the dump of information that's returned from the server once it's done\n    //1. read the cache\n    console.log('running remove from cart updatre fn');\n    const data = cache.readQuery({ query: CURRENT_USER_QUERY });\n    console.log(data);\n    //2. remove that item from the cart\n    const cartItemId = payload.data.removeFromCart.id;\n    data.me.cart = data.me.cart.filter(cartItem => cartItem.id !== cartItemId);\n    //3. write it back to the cache\n    cache.writeQuery({ query: CURRENT_USER_QUERY, data: data });\n  };\n\n  render() {\n    return (\n      <Mutation\n        mutation={REMOVE_FROM_CART_MUTATION}\n        variables={{ id: this.props.id }}\n        // refetchQueries={[{ query: CURRENT_USER_QUERY }]} too slow, use cache instead\n        update={this.update}\n        optimisticResponse={{\n          //give it what you think the server will responde with = optimisticResponse making feedback almost instantenous without haveing to wait for server\n          __typename: 'Mutation', //have to give typename of what type we have. here we're assuming it's going to return a mutation\n          removeFromCart: {\n            //inside that mutation, we have assume it return a removeFromcart object\n            __typename: 'CartItem',\n            id: this.props.id, //assume it's going to return an id with item was removed id.\n          },\n        }}>\n        {(removeFromCart, { loading, error }) => (\n          <BigButton\n            disabled={loading}\n            onClick={() => {\n              removeFromCart().catch(err => alert(err.message));\n            }}\n            title='Delete Item'>\n            ‚ìç\n          </BigButton>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default RemoveFromCart;\nexport { REMOVE_FROM_CART_MUTATION };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;;;;AAhDA;AACA;AADA;AAEA;AADA;AACA;AAiDA;;;;;A","sourceRoot":""}