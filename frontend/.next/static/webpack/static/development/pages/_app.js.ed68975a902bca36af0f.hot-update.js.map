{"version":3,"file":"static/webpack/static/development/pages/_app.js.ed68975a902bca36af0f.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import App, { Container } from 'next/app';\nimport Page from '../components/Page';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData';\nimport gql from 'graphql-tag';\nimport { LOCAL_STATE_QUERY } from '../components/Cart';\nimport { Query, Mutation } from 'react-apollo';\n\nconst CLOSE_CART_MUTATION = gql`\n  mutation {\n    closeCart @client\n  }\n`;\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n    // this exposes the query to the user\n    pageProps.query = ctx.query;\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, apollo, pageProps } = this.props;\n\n    return (\n      <Container>\n        <ApolloProvider client={apollo}>\n          <Mutation mutation={CLOSE_CART_MUTATION}>\n            {closeCart => (\n              <Query query={LOCAL_STATE_QUERY}>\n                <Page onClick={closeCart}>\n                  <Component {...pageProps} />\n                  {/* exposing ctx.query to every page */}\n                </Page>\n              </Query>\n            )}\n          </Mutation>\n        </ApolloProvider>\n      </Container>\n    );\n  }\n}\n\nexport default withData(MyApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAYA;;;;;;;;;;;;AA7BA;AACA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AATA;AACA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}