{"version":3,"file":"static/webpack/static/development/pages/_app.js.4d4d7376f646cda2e428.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce'; //makes sure we're not unnessarily firing off after each key press, but instead after a set (i.e. 350ms) time.\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n        # saying find me search where title contains the search term or description contains search term\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  // console.log(item);\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id,\n    },\n  });\n}\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false, //because we don't have the convience of our query or mutation component, we have to take care of the loading state ourselves\n  };\n  onChange = debounce(async (e, client) => {\n    console.log('searching');\n    console.log(client);\n    // turn loading on\n    this.setState({ loading: true });\n    //Manually query apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value },\n    });\n    console.log(res);\n    this.setState({\n      items: res.data.items,\n      loading: false,\n    });\n  }, 350);\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n        <Downshift\n          onChange={routeToItem}\n          itemToString={item => (item === null ? '' : item.title)}>\n          {/* specify how items get turn to string, instead of outputting 'object Object' */}\n          {({\n            getInputProps,\n            getItemProps,\n            isOpen, //closes the search when clicking away from searchbar\n            inputValue,\n            highlightedIndex,\n          }) => (\n            <div>\n              <ApolloConsumer>\n                {client => (\n                  <input\n                    {...getInputProps({\n                      type: 'search',\n                      placeholder: 'search for an item',\n                      id: 'search',\n                      className: this.state.loading ? 'loading' : '',\n                      onChange: e => {\n                        e.persist();\n                        this.onChange(e, client);\n                      },\n                    })}\n                  />\n                  //what this does:\n                  //1. ApolloConsumer exposes client to us\n                  //2. When user types, we're going to pass the client to a separate function\n                  //3. That allows us to go above the render and make an onchange handler that accepts that event and the client\n                )}\n              </ApolloConsumer>\n              {isOpen && ( //if it's open then show the downdown\n                <DropDown>\n                  {this.state.items.map((item, index) => (\n                    <DropDownItem\n                      {...getItemProps({ item })}\n                      key={item.id}\n                      highlighted={index === highlightedIndex}>\n                      <img width='50' src={item.image} alt={item.title} />\n                      {item.title}\n                    </DropDownItem>\n                  ))}\n                  {!this.state.items.length && !this.state.loading && (\n                    <DropDownItem> Nothing Found for {inputValue}</DropDownItem>\n                  )}\n                </DropDown>\n              )}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;\n\n//we need direct access to our apollo client because our Apollo Client we can manually fire off these search queries\n// rather than using a render prop, hence why we imported ApolloConsumer.\n//ApolloConsumer will do is it will expose the client to us so that we can manually run these onChange queries oursevles\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAAA;AAOA;AACA;AAAA;AAAA;AAFA;AACA;AAPA;AAMA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAeA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAhBA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxCA;AAiDA;;;;AA9EA;AACA;AAgFA;AAGA;AACA;;;;A","sourceRoot":""}